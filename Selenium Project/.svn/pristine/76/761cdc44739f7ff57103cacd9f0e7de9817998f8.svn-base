package Marsh_util;

/**
* Generic keywords file contains simple action keywords used by each test case.
*
* @author  Rajender Pal
*/
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.internal.ProfilesIni;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class Generic_Keywords {
	
	static final String CHROME = "chrome"; 
	static final String IE = "ie"; 
	static final String MOZILLA = "mozilla"; 
	static final String ID = "_id"; 
	static final String XPATH = "_xpath"; 
	static final String NAME = "_name"; 
	static final String CSS = "_css"; 
	static final String CLASS = "_class"; 
	static final String LINK_TEXT = "_linktext"; 
	public WebDriver driver;
	public Properties prop = null;
	public ExtentTest ExtTest = null;
	DesiredCapabilities cap = null;
	String mainWinID = null;
	public String UserName = null;
	public int EndResult = 0;

	public WebDriver openbrowser(String browserkey) {
		ExtTest.log(LogStatus.INFO, "Opening the browser:- " + browserkey);
//		System.out.println("Browser: " + browserkey);
		File fl = null;
		if (browserkey == null) {
			ExtTest.log(LogStatus.ERROR, "Browser field is blank!");
			Assert.fail("Browser field is blank!");
		} else if (browserkey.equalsIgnoreCase(MOZILLA)) {
			ProfilesIni allprof = new ProfilesIni();
			FirefoxProfile profile = allprof.getProfile("default");
			//profile.setEnableNativeEvents(true);
			profile.setAcceptUntrustedCertificates(true);
			profile.setAssumeUntrustedCertificateIssuer(true);
			driver = new FirefoxDriver();
			
		} else if (browserkey.equalsIgnoreCase(CHROME)) {
			fl = new File(System.getProperty("user.dir") + "\\chromedriver.exe");
			if (!fl.exists()) {
				ExtTest.log(LogStatus.ERROR, "Chrome driver executable file does not exist" 
						+ " in the project path.");
				Assert.fail("Chrome driver executable file does not exist in the project path.");
			}
			System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")
					+ "\\chromedriver.exe");
		
			ChromeOptions options = new ChromeOptions();
			options.addArguments("--start-maximized");
			driver = new ChromeDriver();

		} else if (browserkey.equalsIgnoreCase(IE)) {
			fl = new File(System.getProperty("user.dir") + "\\IEDriverServer.exe");
			if (!fl.exists()) {
				ExtTest.log(LogStatus.ERROR, "IE driver executable file does not exist." 
					+ " in the project path");
				Assert.fail("IE driver executable file does not exist in the project path.");
			}
			System.setProperty("webdriver.ie.driver", System.getProperty("user.dir") 
					+ "\\IEDriverServer.exe");
			driver = new InternetExplorerDriver();
		}
		if (driver == null) {
			ExtTest.log(LogStatus.ERROR, "Oh ho..Specified browser is not configured.");
			Assert.fail("Oh ho..Specified browser is not configured.");
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		return driver;
	}

	public void openurl(String urlkey) {
		waitTillPageLoaded();
		driver.navigate().to(prop.getProperty(urlkey));
		ExtTest.log(LogStatus.INFO, "Opened URL :- " + prop.getProperty(urlkey));
	}

	public void verifylogin(String testname, String locatorkey, String ExpectedResult) {
		// verify login
				ExtTest.log(LogStatus.INFO, "Verifying login status.");				
				boolean loggedIn = isElementPresent(locatorkey);
				String ActualResult;
				if (loggedIn) {
					ActualResult = "Success";
					mainWinID = driver.getWindowHandle();
				}else 
					ActualResult = "Failure";
				
				if (!ActualResult.equalsIgnoreCase(ExpectedResult)){
					ExtTest.log(LogStatus.FAIL, "Login functionality failing.");
					if (testname.equalsIgnoreCase("Login_Test"))
						EndResult = 0;
					reportFailure("Login functionality failing. Expected Result-> " + ExpectedResult	+ ", but Actual Result-> " + ActualResult);	
				} else {
					ExtTest.log(LogStatus.PASS, "Login functionality is working as expected. "+ " Expected Result-> " 
				        +ExpectedResult + ", and Actual Result-> " + ActualResult);
					capturescreenshot();
					if (testname.equalsIgnoreCase("Login_Test"))
						EndResult = 1;
				     }
			}
	
    public void clickelement(String locatorkey) throws InterruptedException  {
		waitTillPageLoaded();
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOf(getElement(locatorkey)));		
		if (isElementPresent(locatorkey)) {
			scrollToElement(locatorkey);
			getElement(locatorkey).click();
			ExtTest.log(LogStatus.INFO, "Clicked on element:- " + locatorkey);
			capturescreenshot();
	         }	
	   else {		
		      reportFailure("Required element:- " + locatorkey + " is not visible.");
	         }
	   }
				
	public void input(String locatorkey, String value) {
		ExtTest.log(LogStatus.INFO, "Entering the required data in element:- " 
					+ locatorkey);
		if (locatorkey.contains("username_")){
			UserName = value;
			System.out.println("User try to log in with:- " + UserName);
		}
		WebElement e = getElement(locatorkey);
		try {
			e.clear();
			e.sendKeys(value);
			if (locatorkey.contains("Search") || locatorkey.contains("search") ) {
				e.sendKeys(Keys.ENTER);
				waitTillPageLoaded();
			}
		} catch (Exception e1) {
			e1.printStackTrace();
			System.out.println("This is CATCH block.");
		}
		ExtTest.log(LogStatus.INFO, "Entered data in element:- " + locatorkey);
		capturescreenshot();
	}

	public void verifyTextPresent(String locatorkey, String datakey) {
		//Verify text is present on given location.
		waitTillPageLoaded();
		if(isElementPresent(locatorkey)) {
		    scrollToElement(locatorkey);
			String s1 = getElement(locatorkey).getText();
			if (s1.equalsIgnoreCase(datakey)) {
			         ExtTest.log(LogStatus.PASS, "Text is present. Actual text is -> "+ s1 + " and Expected text is -> "+ datakey );
			         capturescreenshot();
			}else{
				reportFailure("Text is not present. Actual text is -> "+ s1 +" but Expected text is -> " + datakey );
			}
		 }
		else {
			reportFailure("This element is not present :- "+ locatorkey);		
						}
     }
	
	public void verifyAttributeValue(String locatorkey, String datakey) {
		//Verify attribute value is present on given location.
		waitTillPageLoaded();
		if(isElementPresent(locatorkey)) {
		    scrollToElement(locatorkey);
			String s1 = getElement(locatorkey).getAttribute("value");
			if (s1.equalsIgnoreCase(datakey)) {
			         ExtTest.log(LogStatus.PASS, "Correct value is present. Actual -> "+ s1 + " and Expected -> "+ datakey );
			         capturescreenshot();
			}else{
				reportFailure("Attribute value is not present. Actual -> "+ s1 +" but Expected is -> " + datakey );
			}
		 }
		else {
			reportFailure("This element is not present :- "+ locatorkey);		
						}
     }
	
	public void verifyelement(String locatorkey) throws InterruptedException {
		waitTillPageLoaded();
		if (isElementPresent(locatorkey)) {
			scrollToElement(locatorkey);
			ExtTest.log(LogStatus.INFO, "Element found:- " + locatorkey);
			capturescreenshot();
			Thread.sleep(2000);
		}
		else {
			reportFailure("Element NOT found :- " + locatorkey);
		}
	}
	
	public boolean isElementPresent(String locatorkey) {
		List<WebElement> ele = null;
		if (locatorkey.endsWith(XPATH))
			ele = driver.findElements(By.xpath(prop.getProperty(locatorkey)));
		else if (locatorkey.endsWith(ID))
			ele = driver.findElements(By.id(prop.getProperty(locatorkey)));
		else if (locatorkey.endsWith(NAME))
			ele = driver.findElements(By.name(prop.getProperty(locatorkey)));
		else if (locatorkey.endsWith(CSS))
			ele = driver.findElements(By.cssSelector(prop.getProperty(locatorkey)));
		else if (locatorkey.endsWith(LINK_TEXT))
			ele = driver.findElements(By.linkText(prop.getProperty(locatorkey)));
		else if (locatorkey.endsWith(CLASS))
			ele = driver.findElements(By.className(prop.getProperty(locatorkey)));
//		System.out.println(locatorkey + " elements found: " + ele.size());
		if (ele.size() == 0)
			return false;
		else
			return true;
	}
	
	public WebElement getElement(String locatorkey) {
		WebElement ele = null;
		try {
			if (locatorkey.endsWith(XPATH)) {
				ele = driver.findElement(By.xpath(prop.getProperty(locatorkey)));
			} else if (locatorkey.endsWith(ID)) {
				ele = driver.findElement(By.id(prop.getProperty(locatorkey)));
			} else if (locatorkey.endsWith(NAME)) {
				ele = driver.findElement(By.name(prop.getProperty(locatorkey)));
			} else if (locatorkey.endsWith(CSS)) {
				ele = driver.findElement(By.cssSelector(prop.getProperty(locatorkey)));
			} else if (locatorkey.endsWith(LINK_TEXT)) {
				ele = driver.findElement(By.linkText(prop.getProperty(locatorkey)));
			} else if (locatorkey.endsWith(CLASS)) {
				ele = driver.findElement(By.className(prop.getProperty(locatorkey)));
			} else {
				reportFailure("Buddy..Wrong Element locator key is provided:- " + locatorkey);
			}
		} catch (Exception e) {
			reportFailure("Error in locating the Webelement ->  " + locatorkey);
		}
		return ele;
	}
	
	public void waitForElementClickable(String locatorkey) {
		WebElement ele = getElement(locatorkey);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.elementToBeClickable(ele));	
	}

	public void capturescreenshot() {
		// fileName of the screenshot
		Date d = new Date();
		String screenshotFilename = d.toString().replace(":", "_").replace(" ", "_") + ".png";
		// store screenshot in that file
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		String savefileloc = System.getProperty("user.dir") + "//screenshots//" + screenshotFilename;
		try {
			FileUtils.copyFile(scrFile, new File(savefileloc));
		} catch (Exception e) {
			e.printStackTrace();
		}	// put screenshot file in reports
		ExtTest.log(LogStatus.INFO, "Attaching Screenshot-> " + ExtTest.addScreenCapture(savefileloc));
	}
	
	public void waitTillPageLoaded(){	
		// Check if page is fully loaded
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		String status = "in-progress";
		while (!status.equals("complete")) {
			try {
			Thread.sleep(2000);
			} catch (InterruptedException e) {
			e.printStackTrace();
			}
			status = (String) jse.executeScript ("return document.readyState");
			if (status.equalsIgnoreCase("complete"))
				break;
		}
		System.out.println("Page load status is:- " + status);
	}

	public void FinalTestResult(){
		if (EndResult == 1) {
			System.out.println("Final Test result is: PASS.");
			ExtTest.log(LogStatus.PASS, "Test case is PASSED.");
		} else if (EndResult == 0) {
			System.out.println("Final Test result is: FAIL.");
			ExtTest.log(LogStatus.FAIL, "Test case is FAILED.");
		}
	}
	
	public void lastTestStep(){	
		ExtTest.log(LogStatus.INFO, "This is the last step for this test case.");
		EndResult = 1;	
	}	
	
	public void switchTab() {
		//Driver control will move to next opened tab.
			try {
				waitTillPageLoaded();
				List<String> windowHandles = new ArrayList<String>(driver.getWindowHandles());
				driver.switchTo().window(windowHandles.get(1));
				ExtTest.log(LogStatus.INFO, "Switched to new Tab.");
				Thread.sleep(3000);
				capturescreenshot();
			 } 
			catch (Exception e) {
				 reportFailure("This is catch block for switch Tab.");
			}
		}
	
	public void switchFrame(String locatorkey) {
		waitTillPageLoaded();
		if (isElementPresent(locatorkey)) {
			WebDriverWait wait = new WebDriverWait(driver, 50);
			wait.until(ExpectedConditions.visibilityOf(getElement(locatorkey)));
			driver.switchTo().frame(getElement(locatorkey));			
			ExtTest.log(LogStatus.INFO, "Selected frame:- " + locatorkey);
		 } 
	   else { 
		   reportFailure("Required frame :- " + locatorkey +" is not visible.");
	          } 
	}
	
	public void deSelectFrame() {
		//driver control will move to the start of the page.
		try {
			waitTillPageLoaded();		
			driver.switchTo().defaultContent();
		}
		catch(Exception e ) {
			reportFailure("This is catch block for de select frame.");
		}
	}
	
	public void rightClick(String locatorkey) {
		waitTillPageLoaded();
		if (isElementPresent(locatorkey)) {
			try {
			Actions Act = new Actions(driver);
			Act.moveToElement(getElement(locatorkey));
			Act.contextClick(getElement(locatorkey)).build().perform();
			ExtTest.log(LogStatus.INFO, "Perfomed right click on :-" + locatorkey);
		 } 
			catch (Exception e) {
				reportFailure("This is catch block for right click.");	
			  }
			}
	   else { 
		   reportFailure("Required element :- " + locatorkey +" is not visible.");
	          } 
	}
	
	public void deleteCookie() {
		waitTillPageLoaded();
			try {
			driver.manage().deleteAllCookies();
			ExtTest.log(LogStatus.INFO, "Selenium has deleted all saved cookies.");
		 } 
			catch (Exception e) {
				reportFailure("This is catch block for delete cookie");	
			  }
	}
	
	public void dragDropElement(String locatorkey) {
		waitTillPageLoaded();
		if (isElementPresent(locatorkey)) {
			try {
				Actions act=new Actions(driver);		
			    act.dragAndDropBy(getElement(locatorkey), 180, 300).build().perform();
			    ExtTest.log(LogStatus.INFO, "Drag and dropped element :-" + locatorkey);
		         } 
			catch (Exception e) {
				reportFailure("This is catch block for drag and drop element.");	
			  }
			}
	   else { 
		   reportFailure("Required element :- " + locatorkey +" is not visible.");
	          } 
	}
	
    public void scrollToElement(String locatorkey) {
		WebElement ele = getElement(locatorkey);
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		jse.executeScript("arguments[0].scrollIntoView();", ele);
		ExtTest.log(LogStatus.INFO, "Scrolled the page.");
	}
    
	public void quitsession() {
		if (driver != null) {
			ExtTest.log(LogStatus.INFO, "Closing the session.");
			driver.quit();
		} 
	}
	
	public void reportFailure(String failureMsg) {
		ExtTest.log(LogStatus.FAIL, failureMsg);
		capturescreenshot();
		driver.close();
		Assert.fail(failureMsg);
	}
	
	public void waitforelement(String locatorkey) {
		//driver will wait for given element 
		ExtTest.log(LogStatus.INFO, "Waiting for the element: " + locatorkey);
		WebElement element = getElement(locatorkey);
		if (element != null)
			ExtTest.log(LogStatus.INFO, "Waited till the element: " + locatorkey 
					+ " is visible");
	         }
	
	public void scrollPage(String locatorkey) {
		//driver will scroll down page if no. of content display more than 10 
		waitTillPageLoaded();
		scrollToElement(locatorkey);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOf(getElement(locatorkey)));
		List<WebElement> list = driver.findElements(By.xpath(prop.getProperty(locatorkey)));
		int num = list.size();
		System.out.println("Number of pages before scrolling down :- " + num);
		ExtTest.log(LogStatus.INFO, "Number of pages before scrolling down :- " + num);
			if(num>=10) {
				for(int j =0; j<2; j++) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			 js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
			 waitTillPageLoaded();
			 List<WebElement> list3 = driver.findElements(By.xpath(prop.getProperty(locatorkey)));
			 int num2 = list3.size();
			 System.out.println("Scrolled down and now number of pages are:- " + num2);
			ExtTest.log(LogStatus.INFO, "Scrolled down and now number of pages are:- " + num2);
			 capturescreenshot();
				}
			} else {
				ExtTest.log(LogStatus.INFO, "No need to scroll down as content has less than 10 pages.");
				capturescreenshot();
			}		
		}
	
	public String ImageValidation(String locatorkey) {
		waitTillPageLoaded();
		if (isElementPresent(locatorkey)) {
			String type= null;
			scrollToElement(locatorkey);
			String image=getElement(locatorkey).getAttribute("src");
	         if      (image.contains("Portrait")) { type= "Portrait"; }
	         else if (image.contains("Landscape")){ type= "Landscape"; }
	         else if (image.contains("Square"))  {type= "Square"; }
	         else if (image.contains("no-image-found"))  {type= "No Image"; }
	         else {reportFailure("Image type is not defind.");	}
	         return type;
		}
	   else { 
		   reportFailure("This image :- " + locatorkey +" is not present");
		   return null; 
	          }
	}
	
}
