package Marsh_util;
/**
* The keywords file contains all the action keyword name with required arguments. 
*
* @author  Rajender Pal
*/
import java.util.Hashtable;
import java.util.List;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import Marsh_util.Marsh_Constants;

public class Keywords {
	
	
	ExtentTest TestKeywords = null;
	App_Keywords App_key;
	Xls_Reader xlsx = null;
	List <WebElement> list = null;
	public Keywords(Xls_Reader x, ExtentTest t) {
		TestKeywords = t;
		xlsx = x;
	}

@Test
	public void executeKeywords(String TestName, Hashtable <String,String> Htable) throws InterruptedException {
		// Create an object of App Keyword class
		TestKeywords.log(LogStatus.INFO, "Executing keywords");
		App_key = new App_Keywords(TestKeywords);

		// Reading an excel file in the project
		String keywordsSheet="Keywords";
		int rownum = xlsx.getRowCount(keywordsSheet); // index of the last row
		int Testnamerow = 1;
		// Reading the Test details start row >>>> code moved to Data utility class
		while(!xlsx.getCellData(keywordsSheet, 0, Testnamerow).equalsIgnoreCase(TestName)){
			Testnamerow ++;
			
		}
		
		// starting for loop for the excel file
		for(int rNum=Testnamerow;rNum<rownum + Testnamerow;rNum++){
			String tcid = xlsx.getCellData(keywordsSheet, "TCID", rNum);
			if(tcid.equalsIgnoreCase(TestName)){
				String keyword = xlsx.getCellData(keywordsSheet, "Keyword", rNum);
				String object = xlsx.getCellData(keywordsSheet, "Object", rNum);
				String data = xlsx.getCellData(keywordsSheet, "Data", rNum);
				TestKeywords.log(LogStatus.INFO, "TEST STEP :-"+"Action ->"+ keyword+ ", Object ->" + object+", Data ->"+ data);

				if (keyword.equals(Marsh_Constants.OPEN_BROWSER))
					App_key.openbrowser(Htable.get(data));
				else if (keyword.equals(Marsh_Constants.OPEN_URL))
					App_key.openurl(object);
				else if (keyword.equals(Marsh_Constants.CLICK_ELEMENT))
					App_key.clickelement(object);
				else if (keyword.equals(Marsh_Constants.LAST_TEST_STEP))
					App_key.lastTestStep();
				else if (keyword.equals(Marsh_Constants.VERIFY_TEXT_PRESENT))
					App_key.verifyTextPresent(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.VERIFY_ATTRIBUTE_VALUE))
					App_key.verifyAttributeValue(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.DOUBLE_CLICK_ELEMENT))
					App_key.doubleclickelement(object);
				else if (keyword.equals(Marsh_Constants.INPUT))
					App_key.input(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.VERIFY_ELEMENT))
					App_key.verifyelement(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_LOGIN))
					App_key.verifylogin(TestName,object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.WAIT_FOR_ELEMENT))
					App_key.waitforelement(object);
				else if (keyword.equals(Marsh_Constants.WAIT_FOR_ELEMENT_CLICKABLE))
					App_key.waitForElementClickable(object);
				else if (keyword.equals(Marsh_Constants.SWITCH_TAB))
					App_key.switchTab();
				else if (keyword.equals(Marsh_Constants.SWITCH_FRAME))
					App_key.switchFrame(object);
				else if (keyword.equals(Marsh_Constants.RIGHT_CLICK))
					App_key.rightClick(object);
				else if (keyword.equals(Marsh_Constants.DELETE_COOKIE))
					App_key.deleteCookie();
				else if (keyword.equals(Marsh_Constants.VERIFY_WORD_COUNT))
					App_key.verifyWordCount(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.DE_SELECT_FRAME))
					App_key.deSelectFrame();
				else if (keyword.equals(Marsh_Constants.OPEN_AEM_BOX))
					App_key.openAEMBox(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_BROWSE_VALUE))
					App_key.verifyBrowseValue(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.CLOSE_COOKIE_POPUP_IF_PRESENT))
					App_key.closeCOOKIEPopupIfPresent(object);		
				else if (keyword.equals(Marsh_Constants.VERIFY_REGISTER_FORM))
					App_key.verifyRegisterForm(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_LINKS_PRESENT))
					App_key.verifyLinksPresent(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_LINKS_CLICKABLE))
					App_key.verifyLinksClickable(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_CONTENT_PAGES))
					App_key.verifyContentPages(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.SELECT_FROM_DROP))
					App_key.selectFromDrop(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.SCROLL_PAGE))
					App_key.scrollPage(object);
				else if (keyword.equals(Marsh_Constants.VERIFY_URL_REDIRECTION))
					App_key.verifyUrlRedirection(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.VERIFY_NEWTAB_URL_REDIRECTION))
					App_key.verifyNewTabUrlRedirection(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.VERIFY_DATE_FORMAT))
					App_key.verifyDateFormat(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.VERIFY_SHARED_PEOPLE_CREDENTIALS))
					App_key.verifySharedPeopleCredentials(Htable.get(data));
				else if (keyword.equals(Marsh_Constants.INSERT_SHARED_PEOPLE_CREDENTIALS))
					App_key.insertSharedPeopleCredentials();
				else if (keyword.equals(Marsh_Constants.IMAGE_VALIDATION))
					App_key.ImageValidation(object);
				else if (keyword.equals(Marsh_Constants.FILE_UPLOAD))
					App_key.FileUpload(object, Htable.get(data));
				else if (keyword.equals(Marsh_Constants.WAIT_FOR_DELAY))
					App_key.waitForDelay(object);
				
				else {
					TestKeywords.log(LogStatus.ERROR, "Oops!..Provided keyword is not present in the Keywords.java file.");
					Assert.fail("Oops!..Provided keyword is not present in the Keywords.java file.");		
				}
			}
			
		}
				
	}

	public void quitsession() {
		App_key.quitsession();
	}
	
	public void FinalTestResult(){
		App_key.FinalTestResult();
		
	}
	
}
